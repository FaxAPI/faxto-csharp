/* 
 * Fax.to REST API client for C#
 *
 * This is Fax.to REST API client for C#.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: inquiries@fax.to
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFaxReceivingApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// This API gets a list of countries with its area code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="COUNTRY_CODE">Indicates the country code in its ISO 3166-1 alpha-3 format</param>
        /// <param name="STATE_ID">The numerical identifier for the state</param>
        /// <param name="apiKey"></param>
        /// <returns>InlineResponse20014</returns>
        InlineResponse20014 AreaCodesCountryCodeStateIdGet (int? COUNTRY_CODE, int? STATE_ID, string apiKey);

        /// <summary>
        /// This API gets a list of countries with its area code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="COUNTRY_CODE">Indicates the country code in its ISO 3166-1 alpha-3 format</param>
        /// <param name="STATE_ID">The numerical identifier for the state</param>
        /// <param name="apiKey"></param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        ApiResponse<InlineResponse20014> AreaCodesCountryCodeStateIdGetWithHttpInfo (int? COUNTRY_CODE, int? STATE_ID, string apiKey);
        /// <summary>
        /// This API gets a list of DID groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="COUNTRY_CODE">Indicates the country code of the DID group in its ISO 3166-1 alpha-3 format</param>
        /// <param name="areaCode">The area code of the DID group</param>
        /// <param name="apiKey"></param>
        /// <param name="didGroupIds">Used to display more information about specific DID groups (optional)</param>
        /// <param name="stateId">The numerical identifier for the didGroup&#39;s state (optional)</param>
        /// <param name="cityNamePattern">A string pattern for the beginning of city name (optional)</param>
        /// <returns>InlineResponse20015</returns>
        InlineResponse20015 CountriesCountryCodeDidGroupsGet (int? COUNTRY_CODE, int? areaCode, string apiKey, int? didGroupIds = null, int? stateId = null, int? cityNamePattern = null);

        /// <summary>
        /// This API gets a list of DID groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="COUNTRY_CODE">Indicates the country code of the DID group in its ISO 3166-1 alpha-3 format</param>
        /// <param name="areaCode">The area code of the DID group</param>
        /// <param name="apiKey"></param>
        /// <param name="didGroupIds">Used to display more information about specific DID groups (optional)</param>
        /// <param name="stateId">The numerical identifier for the didGroup&#39;s state (optional)</param>
        /// <param name="cityNamePattern">A string pattern for the beginning of city name (optional)</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        ApiResponse<InlineResponse20015> CountriesCountryCodeDidGroupsGetWithHttpInfo (int? COUNTRY_CODE, int? areaCode, string apiKey, int? didGroupIds = null, int? stateId = null, int? cityNamePattern = null);
        /// <summary>
        /// This API gets a list of countries available in the Fax.to coverage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <returns>InlineResponse20012</returns>
        InlineResponse20012 CountriesGet (string apiKey);

        /// <summary>
        /// This API gets a list of countries available in the Fax.to coverage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        ApiResponse<InlineResponse20012> CountriesGetWithHttpInfo (string apiKey);
        /// <summary>
        /// This API gets a list of incoming faxes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="limit">The number of record to return (optional)</param>
        /// <param name="page">The page you want to get (optional)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 IncomingFaxesGet (string apiKey, string limit = null, string page = null);

        /// <summary>
        /// This API gets a list of incoming faxes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="limit">The number of record to return (optional)</param>
        /// <param name="page">The page you want to get (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> IncomingFaxesGetWithHttpInfo (string apiKey, string limit = null, string page = null);
        /// <summary>
        /// This API gets a list of incoming faxes for a specific recipient
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipient">The recipient&#39;s fax number</param>
        /// <param name="apiKey"></param>
        /// <param name="limit">The number of record to return (optional)</param>
        /// <param name="page">The page you want to get (optional)</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 IncomingFaxesRecipientGet (int? recipient, string apiKey, string limit = null, string page = null);

        /// <summary>
        /// This API gets a list of incoming faxes for a specific recipient
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipient">The recipient&#39;s fax number</param>
        /// <param name="apiKey"></param>
        /// <param name="limit">The number of record to return (optional)</param>
        /// <param name="page">The page you want to get (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> IncomingFaxesRecipientGetWithHttpInfo (int? recipient, string apiKey, string limit = null, string page = null);
        /// <summary>
        /// This API gets a list of numbers to get the current configuration of one or multiple number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="limit">The number of record to return (optional)</param>
        /// <param name="page">The page you want to get (optional)</param>
        /// <returns>InlineResponse20017</returns>
        InlineResponse20017 NumbersGet (string apiKey, string limit = null, string page = null);

        /// <summary>
        /// This API gets a list of numbers to get the current configuration of one or multiple number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="limit">The number of record to return (optional)</param>
        /// <param name="page">The page you want to get (optional)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        ApiResponse<InlineResponse20017> NumbersGetWithHttpInfo (string apiKey, string limit = null, string page = null);
        /// <summary>
        /// This API gets a list of provisioned numbers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="didGroupId">The id of the did group</param>
        /// <param name="apiKey"></param>
        /// <returns>InlineResponse20016</returns>
        InlineResponse20016 ProvisionNumbersGet (int? didGroupId, string apiKey);

        /// <summary>
        /// This API gets a list of provisioned numbers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="didGroupId">The id of the did group</param>
        /// <param name="apiKey"></param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        ApiResponse<InlineResponse20016> ProvisionNumbersGetWithHttpInfo (int? didGroupId, string apiKey);
        /// <summary>
        /// This API gets a list of states of a given country available in the Fax.to coverage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="COUNTRY_CODE">Indicates the country code in its ISO 3166-1 alpha-3 format</param>
        /// <param name="apiKey"></param>
        /// <returns>InlineResponse20013</returns>
        InlineResponse20013 StatesCountryCodeGet (int? COUNTRY_CODE, string apiKey);

        /// <summary>
        /// This API gets a list of states of a given country available in the Fax.to coverage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="COUNTRY_CODE">Indicates the country code in its ISO 3166-1 alpha-3 format</param>
        /// <param name="apiKey"></param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        ApiResponse<InlineResponse20013> StatesCountryCodeGetWithHttpInfo (int? COUNTRY_CODE, string apiKey);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// This API gets a list of countries with its area code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="COUNTRY_CODE">Indicates the country code in its ISO 3166-1 alpha-3 format</param>
        /// <param name="STATE_ID">The numerical identifier for the state</param>
        /// <param name="apiKey"></param>
        /// <returns>Task of InlineResponse20014</returns>
        System.Threading.Tasks.Task<InlineResponse20014> AreaCodesCountryCodeStateIdGetAsync (int? COUNTRY_CODE, int? STATE_ID, string apiKey);

        /// <summary>
        /// This API gets a list of countries with its area code
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="COUNTRY_CODE">Indicates the country code in its ISO 3166-1 alpha-3 format</param>
        /// <param name="STATE_ID">The numerical identifier for the state</param>
        /// <param name="apiKey"></param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> AreaCodesCountryCodeStateIdGetAsyncWithHttpInfo (int? COUNTRY_CODE, int? STATE_ID, string apiKey);
        /// <summary>
        /// This API gets a list of DID groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="COUNTRY_CODE">Indicates the country code of the DID group in its ISO 3166-1 alpha-3 format</param>
        /// <param name="areaCode">The area code of the DID group</param>
        /// <param name="apiKey"></param>
        /// <param name="didGroupIds">Used to display more information about specific DID groups (optional)</param>
        /// <param name="stateId">The numerical identifier for the didGroup&#39;s state (optional)</param>
        /// <param name="cityNamePattern">A string pattern for the beginning of city name (optional)</param>
        /// <returns>Task of InlineResponse20015</returns>
        System.Threading.Tasks.Task<InlineResponse20015> CountriesCountryCodeDidGroupsGetAsync (int? COUNTRY_CODE, int? areaCode, string apiKey, int? didGroupIds = null, int? stateId = null, int? cityNamePattern = null);

        /// <summary>
        /// This API gets a list of DID groups
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="COUNTRY_CODE">Indicates the country code of the DID group in its ISO 3166-1 alpha-3 format</param>
        /// <param name="areaCode">The area code of the DID group</param>
        /// <param name="apiKey"></param>
        /// <param name="didGroupIds">Used to display more information about specific DID groups (optional)</param>
        /// <param name="stateId">The numerical identifier for the didGroup&#39;s state (optional)</param>
        /// <param name="cityNamePattern">A string pattern for the beginning of city name (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> CountriesCountryCodeDidGroupsGetAsyncWithHttpInfo (int? COUNTRY_CODE, int? areaCode, string apiKey, int? didGroupIds = null, int? stateId = null, int? cityNamePattern = null);
        /// <summary>
        /// This API gets a list of countries available in the Fax.to coverage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <returns>Task of InlineResponse20012</returns>
        System.Threading.Tasks.Task<InlineResponse20012> CountriesGetAsync (string apiKey);

        /// <summary>
        /// This API gets a list of countries available in the Fax.to coverage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> CountriesGetAsyncWithHttpInfo (string apiKey);
        /// <summary>
        /// This API gets a list of incoming faxes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="limit">The number of record to return (optional)</param>
        /// <param name="page">The page you want to get (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> IncomingFaxesGetAsync (string apiKey, string limit = null, string page = null);

        /// <summary>
        /// This API gets a list of incoming faxes
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="limit">The number of record to return (optional)</param>
        /// <param name="page">The page you want to get (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> IncomingFaxesGetAsyncWithHttpInfo (string apiKey, string limit = null, string page = null);
        /// <summary>
        /// This API gets a list of incoming faxes for a specific recipient
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipient">The recipient&#39;s fax number</param>
        /// <param name="apiKey"></param>
        /// <param name="limit">The number of record to return (optional)</param>
        /// <param name="page">The page you want to get (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> IncomingFaxesRecipientGetAsync (int? recipient, string apiKey, string limit = null, string page = null);

        /// <summary>
        /// This API gets a list of incoming faxes for a specific recipient
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipient">The recipient&#39;s fax number</param>
        /// <param name="apiKey"></param>
        /// <param name="limit">The number of record to return (optional)</param>
        /// <param name="page">The page you want to get (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> IncomingFaxesRecipientGetAsyncWithHttpInfo (int? recipient, string apiKey, string limit = null, string page = null);
        /// <summary>
        /// This API gets a list of numbers to get the current configuration of one or multiple number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="limit">The number of record to return (optional)</param>
        /// <param name="page">The page you want to get (optional)</param>
        /// <returns>Task of InlineResponse20017</returns>
        System.Threading.Tasks.Task<InlineResponse20017> NumbersGetAsync (string apiKey, string limit = null, string page = null);

        /// <summary>
        /// This API gets a list of numbers to get the current configuration of one or multiple number
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="limit">The number of record to return (optional)</param>
        /// <param name="page">The page you want to get (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> NumbersGetAsyncWithHttpInfo (string apiKey, string limit = null, string page = null);
        /// <summary>
        /// This API gets a list of provisioned numbers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="didGroupId">The id of the did group</param>
        /// <param name="apiKey"></param>
        /// <returns>Task of InlineResponse20016</returns>
        System.Threading.Tasks.Task<InlineResponse20016> ProvisionNumbersGetAsync (int? didGroupId, string apiKey);

        /// <summary>
        /// This API gets a list of provisioned numbers
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="didGroupId">The id of the did group</param>
        /// <param name="apiKey"></param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20016>> ProvisionNumbersGetAsyncWithHttpInfo (int? didGroupId, string apiKey);
        /// <summary>
        /// This API gets a list of states of a given country available in the Fax.to coverage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="COUNTRY_CODE">Indicates the country code in its ISO 3166-1 alpha-3 format</param>
        /// <param name="apiKey"></param>
        /// <returns>Task of InlineResponse20013</returns>
        System.Threading.Tasks.Task<InlineResponse20013> StatesCountryCodeGetAsync (int? COUNTRY_CODE, string apiKey);

        /// <summary>
        /// This API gets a list of states of a given country available in the Fax.to coverage
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="COUNTRY_CODE">Indicates the country code in its ISO 3166-1 alpha-3 format</param>
        /// <param name="apiKey"></param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> StatesCountryCodeGetAsyncWithHttpInfo (int? COUNTRY_CODE, string apiKey);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FaxReceivingApi : IFaxReceivingApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FaxReceivingApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FaxReceivingApi(String basePath)
        {
            this.Configuration = new IO.Swagger.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FaxReceivingApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FaxReceivingApi(IO.Swagger.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = IO.Swagger.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Swagger.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// This API gets a list of countries with its area code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="COUNTRY_CODE">Indicates the country code in its ISO 3166-1 alpha-3 format</param>
        /// <param name="STATE_ID">The numerical identifier for the state</param>
        /// <param name="apiKey"></param>
        /// <returns>InlineResponse20014</returns>
        public InlineResponse20014 AreaCodesCountryCodeStateIdGet (int? COUNTRY_CODE, int? STATE_ID, string apiKey)
        {
             ApiResponse<InlineResponse20014> localVarResponse = AreaCodesCountryCodeStateIdGetWithHttpInfo(COUNTRY_CODE, STATE_ID, apiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This API gets a list of countries with its area code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="COUNTRY_CODE">Indicates the country code in its ISO 3166-1 alpha-3 format</param>
        /// <param name="STATE_ID">The numerical identifier for the state</param>
        /// <param name="apiKey"></param>
        /// <returns>ApiResponse of InlineResponse20014</returns>
        public ApiResponse< InlineResponse20014 > AreaCodesCountryCodeStateIdGetWithHttpInfo (int? COUNTRY_CODE, int? STATE_ID, string apiKey)
        {
            // verify the required parameter 'COUNTRY_CODE' is set
            if (COUNTRY_CODE == null)
                throw new ApiException(400, "Missing required parameter 'COUNTRY_CODE' when calling FaxReceivingApi->AreaCodesCountryCodeStateIdGet");
            // verify the required parameter 'STATE_ID' is set
            if (STATE_ID == null)
                throw new ApiException(400, "Missing required parameter 'STATE_ID' when calling FaxReceivingApi->AreaCodesCountryCodeStateIdGet");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling FaxReceivingApi->AreaCodesCountryCodeStateIdGet");

            var localVarPath = "/areacodes/{COUNTRY_CODE}/{STATE_ID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (COUNTRY_CODE != null) localVarPathParams.Add("COUNTRY_CODE", this.Configuration.ApiClient.ParameterToString(COUNTRY_CODE)); // path parameter
            if (STATE_ID != null) localVarPathParams.Add("STATE_ID", this.Configuration.ApiClient.ParameterToString(STATE_ID)); // path parameter
            if (apiKey != null) localVarHeaderParams.Add("api_key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AreaCodesCountryCodeStateIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20014) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20014)));
        }

        /// <summary>
        /// This API gets a list of countries with its area code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="COUNTRY_CODE">Indicates the country code in its ISO 3166-1 alpha-3 format</param>
        /// <param name="STATE_ID">The numerical identifier for the state</param>
        /// <param name="apiKey"></param>
        /// <returns>Task of InlineResponse20014</returns>
        public async System.Threading.Tasks.Task<InlineResponse20014> AreaCodesCountryCodeStateIdGetAsync (int? COUNTRY_CODE, int? STATE_ID, string apiKey)
        {
             ApiResponse<InlineResponse20014> localVarResponse = await AreaCodesCountryCodeStateIdGetAsyncWithHttpInfo(COUNTRY_CODE, STATE_ID, apiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This API gets a list of countries with its area code 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="COUNTRY_CODE">Indicates the country code in its ISO 3166-1 alpha-3 format</param>
        /// <param name="STATE_ID">The numerical identifier for the state</param>
        /// <param name="apiKey"></param>
        /// <returns>Task of ApiResponse (InlineResponse20014)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20014>> AreaCodesCountryCodeStateIdGetAsyncWithHttpInfo (int? COUNTRY_CODE, int? STATE_ID, string apiKey)
        {
            // verify the required parameter 'COUNTRY_CODE' is set
            if (COUNTRY_CODE == null)
                throw new ApiException(400, "Missing required parameter 'COUNTRY_CODE' when calling FaxReceivingApi->AreaCodesCountryCodeStateIdGet");
            // verify the required parameter 'STATE_ID' is set
            if (STATE_ID == null)
                throw new ApiException(400, "Missing required parameter 'STATE_ID' when calling FaxReceivingApi->AreaCodesCountryCodeStateIdGet");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling FaxReceivingApi->AreaCodesCountryCodeStateIdGet");

            var localVarPath = "/areacodes/{COUNTRY_CODE}/{STATE_ID}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (COUNTRY_CODE != null) localVarPathParams.Add("COUNTRY_CODE", this.Configuration.ApiClient.ParameterToString(COUNTRY_CODE)); // path parameter
            if (STATE_ID != null) localVarPathParams.Add("STATE_ID", this.Configuration.ApiClient.ParameterToString(STATE_ID)); // path parameter
            if (apiKey != null) localVarHeaderParams.Add("api_key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("AreaCodesCountryCodeStateIdGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20014>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20014) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20014)));
        }

        /// <summary>
        /// This API gets a list of DID groups 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="COUNTRY_CODE">Indicates the country code of the DID group in its ISO 3166-1 alpha-3 format</param>
        /// <param name="areaCode">The area code of the DID group</param>
        /// <param name="apiKey"></param>
        /// <param name="didGroupIds">Used to display more information about specific DID groups (optional)</param>
        /// <param name="stateId">The numerical identifier for the didGroup&#39;s state (optional)</param>
        /// <param name="cityNamePattern">A string pattern for the beginning of city name (optional)</param>
        /// <returns>InlineResponse20015</returns>
        public InlineResponse20015 CountriesCountryCodeDidGroupsGet (int? COUNTRY_CODE, int? areaCode, string apiKey, int? didGroupIds = null, int? stateId = null, int? cityNamePattern = null)
        {
             ApiResponse<InlineResponse20015> localVarResponse = CountriesCountryCodeDidGroupsGetWithHttpInfo(COUNTRY_CODE, areaCode, apiKey, didGroupIds, stateId, cityNamePattern);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This API gets a list of DID groups 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="COUNTRY_CODE">Indicates the country code of the DID group in its ISO 3166-1 alpha-3 format</param>
        /// <param name="areaCode">The area code of the DID group</param>
        /// <param name="apiKey"></param>
        /// <param name="didGroupIds">Used to display more information about specific DID groups (optional)</param>
        /// <param name="stateId">The numerical identifier for the didGroup&#39;s state (optional)</param>
        /// <param name="cityNamePattern">A string pattern for the beginning of city name (optional)</param>
        /// <returns>ApiResponse of InlineResponse20015</returns>
        public ApiResponse< InlineResponse20015 > CountriesCountryCodeDidGroupsGetWithHttpInfo (int? COUNTRY_CODE, int? areaCode, string apiKey, int? didGroupIds = null, int? stateId = null, int? cityNamePattern = null)
        {
            // verify the required parameter 'COUNTRY_CODE' is set
            if (COUNTRY_CODE == null)
                throw new ApiException(400, "Missing required parameter 'COUNTRY_CODE' when calling FaxReceivingApi->CountriesCountryCodeDidGroupsGet");
            // verify the required parameter 'areaCode' is set
            if (areaCode == null)
                throw new ApiException(400, "Missing required parameter 'areaCode' when calling FaxReceivingApi->CountriesCountryCodeDidGroupsGet");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling FaxReceivingApi->CountriesCountryCodeDidGroupsGet");

            var localVarPath = "/countries/{countryCode}/didgroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (COUNTRY_CODE != null) localVarPathParams.Add("COUNTRY_CODE", this.Configuration.ApiClient.ParameterToString(COUNTRY_CODE)); // path parameter
            if (didGroupIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "didGroupIds", didGroupIds)); // query parameter
            if (stateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stateId", stateId)); // query parameter
            if (cityNamePattern != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cityNamePattern", cityNamePattern)); // query parameter
            if (areaCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "areaCode", areaCode)); // query parameter
            if (apiKey != null) localVarHeaderParams.Add("api_key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountriesCountryCodeDidGroupsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        /// This API gets a list of DID groups 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="COUNTRY_CODE">Indicates the country code of the DID group in its ISO 3166-1 alpha-3 format</param>
        /// <param name="areaCode">The area code of the DID group</param>
        /// <param name="apiKey"></param>
        /// <param name="didGroupIds">Used to display more information about specific DID groups (optional)</param>
        /// <param name="stateId">The numerical identifier for the didGroup&#39;s state (optional)</param>
        /// <param name="cityNamePattern">A string pattern for the beginning of city name (optional)</param>
        /// <returns>Task of InlineResponse20015</returns>
        public async System.Threading.Tasks.Task<InlineResponse20015> CountriesCountryCodeDidGroupsGetAsync (int? COUNTRY_CODE, int? areaCode, string apiKey, int? didGroupIds = null, int? stateId = null, int? cityNamePattern = null)
        {
             ApiResponse<InlineResponse20015> localVarResponse = await CountriesCountryCodeDidGroupsGetAsyncWithHttpInfo(COUNTRY_CODE, areaCode, apiKey, didGroupIds, stateId, cityNamePattern);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This API gets a list of DID groups 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="COUNTRY_CODE">Indicates the country code of the DID group in its ISO 3166-1 alpha-3 format</param>
        /// <param name="areaCode">The area code of the DID group</param>
        /// <param name="apiKey"></param>
        /// <param name="didGroupIds">Used to display more information about specific DID groups (optional)</param>
        /// <param name="stateId">The numerical identifier for the didGroup&#39;s state (optional)</param>
        /// <param name="cityNamePattern">A string pattern for the beginning of city name (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20015)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20015>> CountriesCountryCodeDidGroupsGetAsyncWithHttpInfo (int? COUNTRY_CODE, int? areaCode, string apiKey, int? didGroupIds = null, int? stateId = null, int? cityNamePattern = null)
        {
            // verify the required parameter 'COUNTRY_CODE' is set
            if (COUNTRY_CODE == null)
                throw new ApiException(400, "Missing required parameter 'COUNTRY_CODE' when calling FaxReceivingApi->CountriesCountryCodeDidGroupsGet");
            // verify the required parameter 'areaCode' is set
            if (areaCode == null)
                throw new ApiException(400, "Missing required parameter 'areaCode' when calling FaxReceivingApi->CountriesCountryCodeDidGroupsGet");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling FaxReceivingApi->CountriesCountryCodeDidGroupsGet");

            var localVarPath = "/countries/{countryCode}/didgroups";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (COUNTRY_CODE != null) localVarPathParams.Add("COUNTRY_CODE", this.Configuration.ApiClient.ParameterToString(COUNTRY_CODE)); // path parameter
            if (didGroupIds != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "didGroupIds", didGroupIds)); // query parameter
            if (stateId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stateId", stateId)); // query parameter
            if (cityNamePattern != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "cityNamePattern", cityNamePattern)); // query parameter
            if (areaCode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "areaCode", areaCode)); // query parameter
            if (apiKey != null) localVarHeaderParams.Add("api_key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountriesCountryCodeDidGroupsGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20015>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20015) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20015)));
        }

        /// <summary>
        /// This API gets a list of countries available in the Fax.to coverage 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <returns>InlineResponse20012</returns>
        public InlineResponse20012 CountriesGet (string apiKey)
        {
             ApiResponse<InlineResponse20012> localVarResponse = CountriesGetWithHttpInfo(apiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This API gets a list of countries available in the Fax.to coverage 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <returns>ApiResponse of InlineResponse20012</returns>
        public ApiResponse< InlineResponse20012 > CountriesGetWithHttpInfo (string apiKey)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling FaxReceivingApi->CountriesGet");

            var localVarPath = "/countries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarHeaderParams.Add("api_key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountriesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20012>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20012) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20012)));
        }

        /// <summary>
        /// This API gets a list of countries available in the Fax.to coverage 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <returns>Task of InlineResponse20012</returns>
        public async System.Threading.Tasks.Task<InlineResponse20012> CountriesGetAsync (string apiKey)
        {
             ApiResponse<InlineResponse20012> localVarResponse = await CountriesGetAsyncWithHttpInfo(apiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This API gets a list of countries available in the Fax.to coverage 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <returns>Task of ApiResponse (InlineResponse20012)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20012>> CountriesGetAsyncWithHttpInfo (string apiKey)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling FaxReceivingApi->CountriesGet");

            var localVarPath = "/countries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (apiKey != null) localVarHeaderParams.Add("api_key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountriesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20012>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20012) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20012)));
        }

        /// <summary>
        /// This API gets a list of incoming faxes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="limit">The number of record to return (optional)</param>
        /// <param name="page">The page you want to get (optional)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 IncomingFaxesGet (string apiKey, string limit = null, string page = null)
        {
             ApiResponse<InlineResponse2004> localVarResponse = IncomingFaxesGetWithHttpInfo(apiKey, limit, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This API gets a list of incoming faxes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="limit">The number of record to return (optional)</param>
        /// <param name="page">The page you want to get (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse< InlineResponse2004 > IncomingFaxesGetWithHttpInfo (string apiKey, string limit = null, string page = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling FaxReceivingApi->IncomingFaxesGet");

            var localVarPath = "/incoming-faxes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (apiKey != null) localVarHeaderParams.Add("api_key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncomingFaxesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// This API gets a list of incoming faxes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="limit">The number of record to return (optional)</param>
        /// <param name="page">The page you want to get (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> IncomingFaxesGetAsync (string apiKey, string limit = null, string page = null)
        {
             ApiResponse<InlineResponse2004> localVarResponse = await IncomingFaxesGetAsyncWithHttpInfo(apiKey, limit, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This API gets a list of incoming faxes 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="limit">The number of record to return (optional)</param>
        /// <param name="page">The page you want to get (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> IncomingFaxesGetAsyncWithHttpInfo (string apiKey, string limit = null, string page = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling FaxReceivingApi->IncomingFaxesGet");

            var localVarPath = "/incoming-faxes";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (apiKey != null) localVarHeaderParams.Add("api_key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncomingFaxesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// This API gets a list of incoming faxes for a specific recipient 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipient">The recipient&#39;s fax number</param>
        /// <param name="apiKey"></param>
        /// <param name="limit">The number of record to return (optional)</param>
        /// <param name="page">The page you want to get (optional)</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 IncomingFaxesRecipientGet (int? recipient, string apiKey, string limit = null, string page = null)
        {
             ApiResponse<InlineResponse2004> localVarResponse = IncomingFaxesRecipientGetWithHttpInfo(recipient, apiKey, limit, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This API gets a list of incoming faxes for a specific recipient 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipient">The recipient&#39;s fax number</param>
        /// <param name="apiKey"></param>
        /// <param name="limit">The number of record to return (optional)</param>
        /// <param name="page">The page you want to get (optional)</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public ApiResponse< InlineResponse2004 > IncomingFaxesRecipientGetWithHttpInfo (int? recipient, string apiKey, string limit = null, string page = null)
        {
            // verify the required parameter 'recipient' is set
            if (recipient == null)
                throw new ApiException(400, "Missing required parameter 'recipient' when calling FaxReceivingApi->IncomingFaxesRecipientGet");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling FaxReceivingApi->IncomingFaxesRecipientGet");

            var localVarPath = "/incoming-faxes/{recipient}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recipient != null) localVarPathParams.Add("recipient", this.Configuration.ApiClient.ParameterToString(recipient)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (apiKey != null) localVarHeaderParams.Add("api_key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncomingFaxesRecipientGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// This API gets a list of incoming faxes for a specific recipient 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipient">The recipient&#39;s fax number</param>
        /// <param name="apiKey"></param>
        /// <param name="limit">The number of record to return (optional)</param>
        /// <param name="page">The page you want to get (optional)</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> IncomingFaxesRecipientGetAsync (int? recipient, string apiKey, string limit = null, string page = null)
        {
             ApiResponse<InlineResponse2004> localVarResponse = await IncomingFaxesRecipientGetAsyncWithHttpInfo(recipient, apiKey, limit, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This API gets a list of incoming faxes for a specific recipient 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="recipient">The recipient&#39;s fax number</param>
        /// <param name="apiKey"></param>
        /// <param name="limit">The number of record to return (optional)</param>
        /// <param name="page">The page you want to get (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> IncomingFaxesRecipientGetAsyncWithHttpInfo (int? recipient, string apiKey, string limit = null, string page = null)
        {
            // verify the required parameter 'recipient' is set
            if (recipient == null)
                throw new ApiException(400, "Missing required parameter 'recipient' when calling FaxReceivingApi->IncomingFaxesRecipientGet");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling FaxReceivingApi->IncomingFaxesRecipientGet");

            var localVarPath = "/incoming-faxes/{recipient}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (recipient != null) localVarPathParams.Add("recipient", this.Configuration.ApiClient.ParameterToString(recipient)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (apiKey != null) localVarHeaderParams.Add("api_key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IncomingFaxesRecipientGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse2004>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse2004) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse2004)));
        }

        /// <summary>
        /// This API gets a list of numbers to get the current configuration of one or multiple number 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="limit">The number of record to return (optional)</param>
        /// <param name="page">The page you want to get (optional)</param>
        /// <returns>InlineResponse20017</returns>
        public InlineResponse20017 NumbersGet (string apiKey, string limit = null, string page = null)
        {
             ApiResponse<InlineResponse20017> localVarResponse = NumbersGetWithHttpInfo(apiKey, limit, page);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This API gets a list of numbers to get the current configuration of one or multiple number 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="limit">The number of record to return (optional)</param>
        /// <param name="page">The page you want to get (optional)</param>
        /// <returns>ApiResponse of InlineResponse20017</returns>
        public ApiResponse< InlineResponse20017 > NumbersGetWithHttpInfo (string apiKey, string limit = null, string page = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling FaxReceivingApi->NumbersGet");

            var localVarPath = "/numbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (apiKey != null) localVarHeaderParams.Add("api_key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NumbersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20017>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20017) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20017)));
        }

        /// <summary>
        /// This API gets a list of numbers to get the current configuration of one or multiple number 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="limit">The number of record to return (optional)</param>
        /// <param name="page">The page you want to get (optional)</param>
        /// <returns>Task of InlineResponse20017</returns>
        public async System.Threading.Tasks.Task<InlineResponse20017> NumbersGetAsync (string apiKey, string limit = null, string page = null)
        {
             ApiResponse<InlineResponse20017> localVarResponse = await NumbersGetAsyncWithHttpInfo(apiKey, limit, page);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This API gets a list of numbers to get the current configuration of one or multiple number 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="apiKey"></param>
        /// <param name="limit">The number of record to return (optional)</param>
        /// <param name="page">The page you want to get (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse20017)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20017>> NumbersGetAsyncWithHttpInfo (string apiKey, string limit = null, string page = null)
        {
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling FaxReceivingApi->NumbersGet");

            var localVarPath = "/numbers";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (page != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "page", page)); // query parameter
            if (apiKey != null) localVarHeaderParams.Add("api_key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("NumbersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20017>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20017) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20017)));
        }

        /// <summary>
        /// This API gets a list of provisioned numbers 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="didGroupId">The id of the did group</param>
        /// <param name="apiKey"></param>
        /// <returns>InlineResponse20016</returns>
        public InlineResponse20016 ProvisionNumbersGet (int? didGroupId, string apiKey)
        {
             ApiResponse<InlineResponse20016> localVarResponse = ProvisionNumbersGetWithHttpInfo(didGroupId, apiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This API gets a list of provisioned numbers 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="didGroupId">The id of the did group</param>
        /// <param name="apiKey"></param>
        /// <returns>ApiResponse of InlineResponse20016</returns>
        public ApiResponse< InlineResponse20016 > ProvisionNumbersGetWithHttpInfo (int? didGroupId, string apiKey)
        {
            // verify the required parameter 'didGroupId' is set
            if (didGroupId == null)
                throw new ApiException(400, "Missing required parameter 'didGroupId' when calling FaxReceivingApi->ProvisionNumbersGet");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling FaxReceivingApi->ProvisionNumbersGet");

            var localVarPath = "/countries/didgroups/{did_group_id}/provision";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (didGroupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "did_group_id", didGroupId)); // query parameter
            if (apiKey != null) localVarHeaderParams.Add("api_key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProvisionNumbersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20016>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20016) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20016)));
        }

        /// <summary>
        /// This API gets a list of provisioned numbers 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="didGroupId">The id of the did group</param>
        /// <param name="apiKey"></param>
        /// <returns>Task of InlineResponse20016</returns>
        public async System.Threading.Tasks.Task<InlineResponse20016> ProvisionNumbersGetAsync (int? didGroupId, string apiKey)
        {
             ApiResponse<InlineResponse20016> localVarResponse = await ProvisionNumbersGetAsyncWithHttpInfo(didGroupId, apiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This API gets a list of provisioned numbers 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="didGroupId">The id of the did group</param>
        /// <param name="apiKey"></param>
        /// <returns>Task of ApiResponse (InlineResponse20016)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20016>> ProvisionNumbersGetAsyncWithHttpInfo (int? didGroupId, string apiKey)
        {
            // verify the required parameter 'didGroupId' is set
            if (didGroupId == null)
                throw new ApiException(400, "Missing required parameter 'didGroupId' when calling FaxReceivingApi->ProvisionNumbersGet");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling FaxReceivingApi->ProvisionNumbersGet");

            var localVarPath = "/countries/didgroups/{did_group_id}/provision";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (didGroupId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "did_group_id", didGroupId)); // query parameter
            if (apiKey != null) localVarHeaderParams.Add("api_key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProvisionNumbersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20016>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20016) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20016)));
        }

        /// <summary>
        /// This API gets a list of states of a given country available in the Fax.to coverage 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="COUNTRY_CODE">Indicates the country code in its ISO 3166-1 alpha-3 format</param>
        /// <param name="apiKey"></param>
        /// <returns>InlineResponse20013</returns>
        public InlineResponse20013 StatesCountryCodeGet (int? COUNTRY_CODE, string apiKey)
        {
             ApiResponse<InlineResponse20013> localVarResponse = StatesCountryCodeGetWithHttpInfo(COUNTRY_CODE, apiKey);
             return localVarResponse.Data;
        }

        /// <summary>
        /// This API gets a list of states of a given country available in the Fax.to coverage 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="COUNTRY_CODE">Indicates the country code in its ISO 3166-1 alpha-3 format</param>
        /// <param name="apiKey"></param>
        /// <returns>ApiResponse of InlineResponse20013</returns>
        public ApiResponse< InlineResponse20013 > StatesCountryCodeGetWithHttpInfo (int? COUNTRY_CODE, string apiKey)
        {
            // verify the required parameter 'COUNTRY_CODE' is set
            if (COUNTRY_CODE == null)
                throw new ApiException(400, "Missing required parameter 'COUNTRY_CODE' when calling FaxReceivingApi->StatesCountryCodeGet");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling FaxReceivingApi->StatesCountryCodeGet");

            var localVarPath = "/states/{COUNTRY_CODE}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (COUNTRY_CODE != null) localVarPathParams.Add("COUNTRY_CODE", this.Configuration.ApiClient.ParameterToString(COUNTRY_CODE)); // path parameter
            if (apiKey != null) localVarHeaderParams.Add("api_key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatesCountryCodeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20013) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20013)));
        }

        /// <summary>
        /// This API gets a list of states of a given country available in the Fax.to coverage 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="COUNTRY_CODE">Indicates the country code in its ISO 3166-1 alpha-3 format</param>
        /// <param name="apiKey"></param>
        /// <returns>Task of InlineResponse20013</returns>
        public async System.Threading.Tasks.Task<InlineResponse20013> StatesCountryCodeGetAsync (int? COUNTRY_CODE, string apiKey)
        {
             ApiResponse<InlineResponse20013> localVarResponse = await StatesCountryCodeGetAsyncWithHttpInfo(COUNTRY_CODE, apiKey);
             return localVarResponse.Data;

        }

        /// <summary>
        /// This API gets a list of states of a given country available in the Fax.to coverage 
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="COUNTRY_CODE">Indicates the country code in its ISO 3166-1 alpha-3 format</param>
        /// <param name="apiKey"></param>
        /// <returns>Task of ApiResponse (InlineResponse20013)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse20013>> StatesCountryCodeGetAsyncWithHttpInfo (int? COUNTRY_CODE, string apiKey)
        {
            // verify the required parameter 'COUNTRY_CODE' is set
            if (COUNTRY_CODE == null)
                throw new ApiException(400, "Missing required parameter 'COUNTRY_CODE' when calling FaxReceivingApi->StatesCountryCodeGet");
            // verify the required parameter 'apiKey' is set
            if (apiKey == null)
                throw new ApiException(400, "Missing required parameter 'apiKey' when calling FaxReceivingApi->StatesCountryCodeGet");

            var localVarPath = "/states/{COUNTRY_CODE}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/xml"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (COUNTRY_CODE != null) localVarPathParams.Add("COUNTRY_CODE", this.Configuration.ApiClient.ParameterToString(COUNTRY_CODE)); // path parameter
            if (apiKey != null) localVarHeaderParams.Add("api_key", this.Configuration.ApiClient.ParameterToString(apiKey)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StatesCountryCodeGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<InlineResponse20013>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (InlineResponse20013) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(InlineResponse20013)));
        }

    }
}

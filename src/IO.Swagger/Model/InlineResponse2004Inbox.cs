/* 
 * Fax.to REST API client for C#
 *
 * This is Fax.to REST API client for C#.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: inquiries@fax.to
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse2004Inbox
    /// </summary>
    [DataContract]
    public partial class InlineResponse2004Inbox :  IEquatable<InlineResponse2004Inbox>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2004Inbox" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="didId">didId.</param>
        /// <param name="filename">filename.</param>
        /// <param name="filesize">filesize.</param>
        /// <param name="number">number.</param>
        /// <param name="sender">sender.</param>
        /// <param name="totalPages">totalPages.</param>
        /// <param name="createdAt">createdAt.</param>
        /// <param name="previewFile">previewFile.</param>
        /// <param name="fileUrl">fileUrl.</param>
        public InlineResponse2004Inbox(int? id = default(int?), int? didId = default(int?), string filename = default(string), string filesize = default(string), string number = default(string), string sender = default(string), int? totalPages = default(int?), InlineResponse2003Created createdAt = default(InlineResponse2003Created), string previewFile = default(string), string fileUrl = default(string))
        {
            this.Id = id;
            this.DidId = didId;
            this.Filename = filename;
            this.Filesize = filesize;
            this.Number = number;
            this.Sender = sender;
            this.TotalPages = totalPages;
            this.CreatedAt = createdAt;
            this.PreviewFile = previewFile;
            this.FileUrl = fileUrl;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets DidId
        /// </summary>
        [DataMember(Name="did_id", EmitDefaultValue=false)]
        public int? DidId { get; set; }

        /// <summary>
        /// Gets or Sets Filename
        /// </summary>
        [DataMember(Name="filename", EmitDefaultValue=false)]
        public string Filename { get; set; }

        /// <summary>
        /// Gets or Sets Filesize
        /// </summary>
        [DataMember(Name="filesize", EmitDefaultValue=false)]
        public string Filesize { get; set; }

        /// <summary>
        /// Gets or Sets Number
        /// </summary>
        [DataMember(Name="number", EmitDefaultValue=false)]
        public string Number { get; set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>
        [DataMember(Name="sender", EmitDefaultValue=false)]
        public string Sender { get; set; }

        /// <summary>
        /// Gets or Sets TotalPages
        /// </summary>
        [DataMember(Name="total_pages", EmitDefaultValue=false)]
        public int? TotalPages { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public InlineResponse2003Created CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets PreviewFile
        /// </summary>
        [DataMember(Name="preview_file", EmitDefaultValue=false)]
        public string PreviewFile { get; set; }

        /// <summary>
        /// Gets or Sets FileUrl
        /// </summary>
        [DataMember(Name="file_url", EmitDefaultValue=false)]
        public string FileUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2004Inbox {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DidId: ").Append(DidId).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  Filesize: ").Append(Filesize).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  TotalPages: ").Append(TotalPages).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  PreviewFile: ").Append(PreviewFile).Append("\n");
            sb.Append("  FileUrl: ").Append(FileUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2004Inbox);
        }

        /// <summary>
        /// Returns true if InlineResponse2004Inbox instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2004Inbox to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2004Inbox input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DidId == input.DidId ||
                    (this.DidId != null &&
                    this.DidId.Equals(input.DidId))
                ) && 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                ) && 
                (
                    this.Filesize == input.Filesize ||
                    (this.Filesize != null &&
                    this.Filesize.Equals(input.Filesize))
                ) && 
                (
                    this.Number == input.Number ||
                    (this.Number != null &&
                    this.Number.Equals(input.Number))
                ) && 
                (
                    this.Sender == input.Sender ||
                    (this.Sender != null &&
                    this.Sender.Equals(input.Sender))
                ) && 
                (
                    this.TotalPages == input.TotalPages ||
                    (this.TotalPages != null &&
                    this.TotalPages.Equals(input.TotalPages))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.PreviewFile == input.PreviewFile ||
                    (this.PreviewFile != null &&
                    this.PreviewFile.Equals(input.PreviewFile))
                ) && 
                (
                    this.FileUrl == input.FileUrl ||
                    (this.FileUrl != null &&
                    this.FileUrl.Equals(input.FileUrl))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DidId != null)
                    hashCode = hashCode * 59 + this.DidId.GetHashCode();
                if (this.Filename != null)
                    hashCode = hashCode * 59 + this.Filename.GetHashCode();
                if (this.Filesize != null)
                    hashCode = hashCode * 59 + this.Filesize.GetHashCode();
                if (this.Number != null)
                    hashCode = hashCode * 59 + this.Number.GetHashCode();
                if (this.Sender != null)
                    hashCode = hashCode * 59 + this.Sender.GetHashCode();
                if (this.TotalPages != null)
                    hashCode = hashCode * 59 + this.TotalPages.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.PreviewFile != null)
                    hashCode = hashCode * 59 + this.PreviewFile.GetHashCode();
                if (this.FileUrl != null)
                    hashCode = hashCode * 59 + this.FileUrl.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

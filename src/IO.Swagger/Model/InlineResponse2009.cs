/* 
 * Fax.to REST API client for C#
 *
 * This is Fax.to REST API client for C#.
 *
 * OpenAPI spec version: 2.0.0
 * Contact: inquiries@fax.to
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InlineResponse2009
    /// </summary>
    [DataContract]
    public partial class InlineResponse2009 :  IEquatable<InlineResponse2009>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineResponse2009" /> class.
        /// </summary>
        /// <param name="status">status.</param>
        /// <param name="userId">userId.</param>
        /// <param name="createdDate">createdDate.</param>
        /// <param name="id">id.</param>
        /// <param name="filename">filename.</param>
        /// <param name="origFilename">origFilename.</param>
        /// <param name="previewFile">previewFile.</param>
        /// <param name="previewImage">previewImage.</param>
        /// <param name="previewInStorage">previewInStorage.</param>
        /// <param name="fileExtension">fileExtension.</param>
        /// <param name="filenameUploaded">filenameUploaded.</param>
        /// <param name="filesize">filesize.</param>
        /// <param name="s3">s3.</param>
        /// <param name="serverDocumentId">serverDocumentId.</param>
        /// <param name="teamUserId">teamUserId.</param>
        /// <param name="totalPages">totalPages.</param>
        /// <param name="updatedAt">updatedAt.</param>
        public InlineResponse2009(string status = default(string), int? userId = default(int?), DateTime? createdDate = default(DateTime?), int? id = default(int?), string filename = default(string), string origFilename = default(string), string previewFile = default(string), string previewImage = default(string), int? previewInStorage = default(int?), string fileExtension = default(string), string filenameUploaded = default(string), string filesize = default(string), int? s3 = default(int?), int? serverDocumentId = default(int?), int? teamUserId = default(int?), int? totalPages = default(int?), DateTime? updatedAt = default(DateTime?))
        {
            this.Status = status;
            this.UserId = userId;
            this.CreatedDate = createdDate;
            this.Id = id;
            this.Filename = filename;
            this.OrigFilename = origFilename;
            this.PreviewFile = previewFile;
            this.PreviewImage = previewImage;
            this.PreviewInStorage = previewInStorage;
            this.FileExtension = fileExtension;
            this.FilenameUploaded = filenameUploaded;
            this.Filesize = filesize;
            this.S3 = s3;
            this.ServerDocumentId = serverDocumentId;
            this.TeamUserId = teamUserId;
            this.TotalPages = totalPages;
            this.UpdatedAt = updatedAt;
        }
        
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public int? UserId { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="created_date", EmitDefaultValue=false)]
        public DateTime? CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Filename
        /// </summary>
        [DataMember(Name="filename", EmitDefaultValue=false)]
        public string Filename { get; set; }

        /// <summary>
        /// Gets or Sets OrigFilename
        /// </summary>
        [DataMember(Name="orig_filename", EmitDefaultValue=false)]
        public string OrigFilename { get; set; }

        /// <summary>
        /// Gets or Sets PreviewFile
        /// </summary>
        [DataMember(Name="preview_file", EmitDefaultValue=false)]
        public string PreviewFile { get; set; }

        /// <summary>
        /// Gets or Sets PreviewImage
        /// </summary>
        [DataMember(Name="preview_image", EmitDefaultValue=false)]
        public string PreviewImage { get; set; }

        /// <summary>
        /// Gets or Sets PreviewInStorage
        /// </summary>
        [DataMember(Name="preview_in_storage", EmitDefaultValue=false)]
        public int? PreviewInStorage { get; set; }

        /// <summary>
        /// Gets or Sets FileExtension
        /// </summary>
        [DataMember(Name="file_extension", EmitDefaultValue=false)]
        public string FileExtension { get; set; }

        /// <summary>
        /// Gets or Sets FilenameUploaded
        /// </summary>
        [DataMember(Name="filename_uploaded", EmitDefaultValue=false)]
        public string FilenameUploaded { get; set; }

        /// <summary>
        /// Gets or Sets Filesize
        /// </summary>
        [DataMember(Name="filesize", EmitDefaultValue=false)]
        public string Filesize { get; set; }

        /// <summary>
        /// Gets or Sets S3
        /// </summary>
        [DataMember(Name="s3", EmitDefaultValue=false)]
        public int? S3 { get; set; }

        /// <summary>
        /// Gets or Sets ServerDocumentId
        /// </summary>
        [DataMember(Name="server_document_id", EmitDefaultValue=false)]
        public int? ServerDocumentId { get; set; }

        /// <summary>
        /// Gets or Sets TeamUserId
        /// </summary>
        [DataMember(Name="team_user_id", EmitDefaultValue=false)]
        public int? TeamUserId { get; set; }

        /// <summary>
        /// Gets or Sets TotalPages
        /// </summary>
        [DataMember(Name="total_pages", EmitDefaultValue=false)]
        public int? TotalPages { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updated_at", EmitDefaultValue=false)]
        public DateTime? UpdatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse2009 {\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Filename: ").Append(Filename).Append("\n");
            sb.Append("  OrigFilename: ").Append(OrigFilename).Append("\n");
            sb.Append("  PreviewFile: ").Append(PreviewFile).Append("\n");
            sb.Append("  PreviewImage: ").Append(PreviewImage).Append("\n");
            sb.Append("  PreviewInStorage: ").Append(PreviewInStorage).Append("\n");
            sb.Append("  FileExtension: ").Append(FileExtension).Append("\n");
            sb.Append("  FilenameUploaded: ").Append(FilenameUploaded).Append("\n");
            sb.Append("  Filesize: ").Append(Filesize).Append("\n");
            sb.Append("  S3: ").Append(S3).Append("\n");
            sb.Append("  ServerDocumentId: ").Append(ServerDocumentId).Append("\n");
            sb.Append("  TeamUserId: ").Append(TeamUserId).Append("\n");
            sb.Append("  TotalPages: ").Append(TotalPages).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineResponse2009);
        }

        /// <summary>
        /// Returns true if InlineResponse2009 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineResponse2009 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse2009 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Filename == input.Filename ||
                    (this.Filename != null &&
                    this.Filename.Equals(input.Filename))
                ) && 
                (
                    this.OrigFilename == input.OrigFilename ||
                    (this.OrigFilename != null &&
                    this.OrigFilename.Equals(input.OrigFilename))
                ) && 
                (
                    this.PreviewFile == input.PreviewFile ||
                    (this.PreviewFile != null &&
                    this.PreviewFile.Equals(input.PreviewFile))
                ) && 
                (
                    this.PreviewImage == input.PreviewImage ||
                    (this.PreviewImage != null &&
                    this.PreviewImage.Equals(input.PreviewImage))
                ) && 
                (
                    this.PreviewInStorage == input.PreviewInStorage ||
                    (this.PreviewInStorage != null &&
                    this.PreviewInStorage.Equals(input.PreviewInStorage))
                ) && 
                (
                    this.FileExtension == input.FileExtension ||
                    (this.FileExtension != null &&
                    this.FileExtension.Equals(input.FileExtension))
                ) && 
                (
                    this.FilenameUploaded == input.FilenameUploaded ||
                    (this.FilenameUploaded != null &&
                    this.FilenameUploaded.Equals(input.FilenameUploaded))
                ) && 
                (
                    this.Filesize == input.Filesize ||
                    (this.Filesize != null &&
                    this.Filesize.Equals(input.Filesize))
                ) && 
                (
                    this.S3 == input.S3 ||
                    (this.S3 != null &&
                    this.S3.Equals(input.S3))
                ) && 
                (
                    this.ServerDocumentId == input.ServerDocumentId ||
                    (this.ServerDocumentId != null &&
                    this.ServerDocumentId.Equals(input.ServerDocumentId))
                ) && 
                (
                    this.TeamUserId == input.TeamUserId ||
                    (this.TeamUserId != null &&
                    this.TeamUserId.Equals(input.TeamUserId))
                ) && 
                (
                    this.TotalPages == input.TotalPages ||
                    (this.TotalPages != null &&
                    this.TotalPages.Equals(input.TotalPages))
                ) && 
                (
                    this.UpdatedAt == input.UpdatedAt ||
                    (this.UpdatedAt != null &&
                    this.UpdatedAt.Equals(input.UpdatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.CreatedDate != null)
                    hashCode = hashCode * 59 + this.CreatedDate.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Filename != null)
                    hashCode = hashCode * 59 + this.Filename.GetHashCode();
                if (this.OrigFilename != null)
                    hashCode = hashCode * 59 + this.OrigFilename.GetHashCode();
                if (this.PreviewFile != null)
                    hashCode = hashCode * 59 + this.PreviewFile.GetHashCode();
                if (this.PreviewImage != null)
                    hashCode = hashCode * 59 + this.PreviewImage.GetHashCode();
                if (this.PreviewInStorage != null)
                    hashCode = hashCode * 59 + this.PreviewInStorage.GetHashCode();
                if (this.FileExtension != null)
                    hashCode = hashCode * 59 + this.FileExtension.GetHashCode();
                if (this.FilenameUploaded != null)
                    hashCode = hashCode * 59 + this.FilenameUploaded.GetHashCode();
                if (this.Filesize != null)
                    hashCode = hashCode * 59 + this.Filesize.GetHashCode();
                if (this.S3 != null)
                    hashCode = hashCode * 59 + this.S3.GetHashCode();
                if (this.ServerDocumentId != null)
                    hashCode = hashCode * 59 + this.ServerDocumentId.GetHashCode();
                if (this.TeamUserId != null)
                    hashCode = hashCode * 59 + this.TeamUserId.GetHashCode();
                if (this.TotalPages != null)
                    hashCode = hashCode * 59 + this.TotalPages.GetHashCode();
                if (this.UpdatedAt != null)
                    hashCode = hashCode * 59 + this.UpdatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
